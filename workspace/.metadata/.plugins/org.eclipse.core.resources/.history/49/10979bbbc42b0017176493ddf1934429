import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;

//import tetris.Shape.Tetrominoes;


public class Grid extends JPanel implements ActionListener {
	/*
	 * Where all the magic happens
	 * Store the stationary pieces on the grid 
	 * And move active piece along grid
	 */
	final int Width = 10;
	final int Height = 30;
	
	Timer timer;
	boolean isFalling = true; //is the piece still falling?
	boolean isStarted = false;
	boolean isPaused = false;
	int score = 0;
	int x = 0;
	int y = 0;
	JLabel status;
	Tetromino activeTetro;
	Tetromino[] grid;
	
	public Grid(Game parent) {
		setFocusable(true);
		activeTetro = (Tetromino)PieceFactory.getPiece(getRandomLetter());
		timer = new Timer(400, this);
		timer.start();
		status = parent.getStatus();
		grid = new Tetromino[Width * Height];
		addKeyListener(new TAdapter());
		
	}
	
	public static String getRandomLetter() {
		return "L";
	}
	
    class TAdapter extends KeyAdapter {
        public void keyPressed(KeyEvent e) {

            if (!isStarted || activeTetro.getLetter() == Tetromino." ") {  
                return;
            }

            int keycode = e.getKeyCode();

            if (keycode == 'p' || keycode == 'P') {
                pause();
                return;
            }

            if (isPaused)
                return;

            switch (keycode) {
            case KeyEvent.VK_LEFT:
                tryMove(activeTetro, x - 1, y);
                break;
            case KeyEvent.VK_RIGHT:
                tryMove(activeTetro, x + 1, y);
                break;
            case KeyEvent.VK_UP:
                tryMove(activeTetro.rotate(), x, y);
                break;                
            case KeyEvent.VK_DOWN:
            	tryMove(activeTetro, x, y - 1);
                break;    
            case 'd':
                oneLineDown();
                break;
            case 'D':
                oneLineDown();
                break;
            }

        }
    }
	
}
